{"version":3,"file":"index.js","sources":["../../../../../src/integrations/tracing/vercelai/index.ts"],"sourcesContent":["/* eslint-disable complexity */\nimport type { IntegrationFn } from '@sentry/core';\nimport { defineIntegration, SEMANTIC_ATTRIBUTE_SENTRY_OP, spanToJSON } from '@sentry/core';\nimport { generateInstrumentOnce } from '../../../otel/instrument';\nimport { addOriginToSpan } from '../../../utils/addOriginToSpan';\nimport {\n  AI_MODEL_ID_ATTRIBUTE,\n  AI_MODEL_PROVIDER_ATTRIBUTE,\n  AI_PROMPT_ATTRIBUTE,\n  AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE,\n  AI_USAGE_PROMPT_TOKENS_ATTRIBUTE,\n  GEN_AI_RESPONSE_MODEL_ATTRIBUTE,\n  GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE,\n  GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE,\n} from './attributes';\nimport { INTEGRATION_NAME } from './constants';\nimport { SentryVercelAiInstrumentation } from './instrumentation';\nimport type { VercelAiOptions } from './types';\n\nexport const instrumentVercelAi = generateInstrumentOnce(INTEGRATION_NAME, () => new SentryVercelAiInstrumentation({}));\n\nconst _vercelAIIntegration = ((options: VercelAiOptions = {}) => {\n  let instrumentation: undefined | SentryVercelAiInstrumentation;\n\n  return {\n    name: INTEGRATION_NAME,\n    options,\n    setupOnce() {\n      instrumentation = instrumentVercelAi();\n    },\n    setup(client) {\n      instrumentation?.callWhenPatched(() => {\n        client.on('spanStart', span => {\n          const { data: attributes, description: name } = spanToJSON(span);\n\n          if (!name) {\n            return;\n          }\n\n          // The id of the model\n          const aiModelId = attributes[AI_MODEL_ID_ATTRIBUTE];\n\n          // the provider of the model\n          const aiModelProvider = attributes[AI_MODEL_PROVIDER_ATTRIBUTE];\n\n          // both of these must be defined for the integration to work\n          if (typeof aiModelId !== 'string' || typeof aiModelProvider !== 'string' || !aiModelId || !aiModelProvider) {\n            return;\n          }\n\n          let isPipelineSpan = false;\n\n          switch (name) {\n            case 'ai.generateText': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.generateText');\n              isPipelineSpan = true;\n              break;\n            }\n            case 'ai.generateText.doGenerate': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doGenerate');\n              break;\n            }\n            case 'ai.streamText': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.streamText');\n              isPipelineSpan = true;\n              break;\n            }\n            case 'ai.streamText.doStream': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doStream');\n              break;\n            }\n            case 'ai.generateObject': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.generateObject');\n              isPipelineSpan = true;\n              break;\n            }\n            case 'ai.generateObject.doGenerate': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doGenerate');\n              break;\n            }\n            case 'ai.streamObject': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.streamObject');\n              isPipelineSpan = true;\n              break;\n            }\n            case 'ai.streamObject.doStream': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run.doStream');\n              break;\n            }\n            case 'ai.embed': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.embed');\n              isPipelineSpan = true;\n              break;\n            }\n            case 'ai.embed.doEmbed': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.embeddings');\n              break;\n            }\n            case 'ai.embedMany': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.pipeline.embedMany');\n              isPipelineSpan = true;\n              break;\n            }\n            case 'ai.embedMany.doEmbed': {\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.embeddings');\n              break;\n            }\n            case 'ai.toolCall':\n            case 'ai.stream.firstChunk':\n            case 'ai.stream.finish':\n              span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_OP, 'ai.run');\n              break;\n          }\n\n          addOriginToSpan(span, 'auto.vercelai.otel');\n\n          const nameWthoutAi = name.replace('ai.', '');\n          span.setAttribute('ai.pipeline.name', nameWthoutAi);\n          span.updateName(nameWthoutAi);\n\n          // If a Telemetry name is set and it is a pipeline span, use that as the operation name\n          const functionId = attributes['ai.telemetry.functionId'];\n          if (functionId && typeof functionId === 'string' && isPipelineSpan) {\n            span.updateName(functionId);\n            span.setAttribute('ai.pipeline.name', functionId);\n          }\n\n          if (attributes[AI_PROMPT_ATTRIBUTE]) {\n            span.setAttribute('gen_ai.prompt', attributes[AI_PROMPT_ATTRIBUTE]);\n          }\n          if (attributes[AI_MODEL_ID_ATTRIBUTE] && !attributes[GEN_AI_RESPONSE_MODEL_ATTRIBUTE]) {\n            span.setAttribute(GEN_AI_RESPONSE_MODEL_ATTRIBUTE, attributes[AI_MODEL_ID_ATTRIBUTE]);\n          }\n          span.setAttribute('ai.streaming', name.includes('stream'));\n        });\n\n        client.addEventProcessor(event => {\n          if (event.type === 'transaction' && event.spans?.length) {\n            for (const span of event.spans) {\n              const { data: attributes, description: name } = span;\n\n              if (!name || span.origin !== 'auto.vercelai.otel') {\n                continue;\n              }\n\n              if (attributes[AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE] != undefined) {\n                attributes[GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] = attributes[AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE];\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete attributes[AI_USAGE_COMPLETION_TOKENS_ATTRIBUTE];\n              }\n              if (attributes[AI_USAGE_PROMPT_TOKENS_ATTRIBUTE] != undefined) {\n                attributes[GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE] = attributes[AI_USAGE_PROMPT_TOKENS_ATTRIBUTE];\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete attributes[AI_USAGE_PROMPT_TOKENS_ATTRIBUTE];\n              }\n              if (\n                typeof attributes[GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] === 'number' &&\n                typeof attributes[GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE] === 'number'\n              ) {\n                attributes['gen_ai.usage.total_tokens'] =\n                  attributes[GEN_AI_USAGE_OUTPUT_TOKENS_ATTRIBUTE] + attributes[GEN_AI_USAGE_INPUT_TOKENS_ATTRIBUTE];\n              }\n            }\n          }\n\n          return event;\n        });\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Adds Sentry tracing instrumentation for the [ai](https://www.npmjs.com/package/ai) library.\n *\n * For more information, see the [`ai` documentation](https://sdk.vercel.ai/docs/ai-sdk-core/telemetry).\n *\n * @example\n * ```javascript\n * const Sentry = require('@sentry/node');\n *\n * Sentry.init({\n *  integrations: [Sentry.vercelAIIntegration()],\n * });\n * ```\n *\n * By default this integration adds tracing support to all `ai` function calls. If you need to disable\n * collecting spans for a specific call, you can do so by setting `experimental_telemetry.isEnabled` to\n * `false` in the first argument of the function call.\n *\n * ```javascript\n * const result = await generateText({\n *   model: openai('gpt-4-turbo'),\n *   experimental_telemetry: { isEnabled: false },\n * });\n * ```\n *\n * If you want to collect inputs and outputs for a specific call, you must specifically opt-in to each\n * function call by setting `experimental_telemetry.recordInputs` and `experimental_telemetry.recordOutputs`\n * to `true`.\n *\n * ```javascript\n * const result = await generateText({\n *  model: openai('gpt-4-turbo'),\n *  experimental_telemetry: { isEnabled: true, recordInputs: true, recordOutputs: true },\n * });\n */\nexport const vercelAIIntegration = defineIntegration(_vercelAIIntegration);\n"],"names":[],"mappings":"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"}